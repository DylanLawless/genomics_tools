pca_res_x$Var <- as.numeric( row.names(pca_res_x))
pca_res_x %>%
ggplot(aes(x=PC1,y=PC2,
label=Var)) +
scale_fill_gradient(low = "steelblue1 ", high = "navy")+
geom_label(aes(fill = Var), colour = "white", size = 2, alpha=0.7,
position=position_jitter(width=1,height=1))+
theme(legend.position="bottom",
panel.background = element_rect("#F7F7F7"))+
labs(x=paste0("PC1: ",round(var_explained[1]*100,1),"%"),
y=paste0("PC2: ",round(var_explained[2]*100,1),"%"))
var_explained
pca_res_x <- pca_res$x %>% as.data.frame()
pca_res_x$Var <- as.numeric( row.names(pca_res_x))
pca_res_x
as.numeric( row.names(pca_res_x))
pca_res_x <- pca_res$x %>% as.data.frame()
pca_res_x
pca_res_x %>%
ggplot(aes(x=PC1,y=PC2,
label=Var)) +
scale_fill_gradient(low = "steelblue1 ", high = "navy")+
geom_label(aes(fill = Var), colour = "white", size = 2, alpha=0.7,
position=position_jitter(width=1,height=1))+
theme(legend.position="bottom",
panel.background = element_rect("#F7F7F7"))+
labs(x=paste0("PC1: ",round(var_explained[1]*100,1),"%"),
y=paste0("PC2: ",round(var_explained[2]*100,1),"%"))
row.names(pca_res_x
)
as.numeric( row.names(pca_res_x))
df$labels
df <-
read.table(file="../data/rsv.msa.tabbed.split",
header = FALSE,
sep = " ",
stringsAsFactors = FALSE,
colClasses = c("character"))
df$labels <- rownames(df)
df$labels
# Wide to long
df_long <- df %>% tidyr::gather(var_pos, var, V1:V257, factor_key=TRUE)
df_long
df_long$var_pos <- as.numeric( str_replace_all(df_long$var_pos, "V", "") )
df_long
# Total count position / variant per position
count <-
df_long %>%
group_by(var_pos, var) %>%
tally(name = "var_count")
# For each position count and rank frequency of residue
rank <- count %>%
group_by(var_pos) %>%
mutate(rank = rank(desc(var_count))) %>%
arrange(rank)
# Name the most frequent residue as REF.
rank$binary <- rank$rank
rank$binary[rank$rank == "1"] <- "REF"
rank$binary[rank$rank > "1"] <- "ALT"
rank$value <- rank$rank
rank$value[rank$rank == "1"] <- "0"
rank$value[rank$rank > "1"] <- "1"
rank$value <- as.numeric(rank$value)
df2 <- merge(df_long, (rank %>% select(var_pos, var, value))) %>%
select(var_pos, labels, value)
genotypes <- spread(df2, var_pos, value)
rownames(genotypes) <- genotypes$labels
genotypes <- genotypes %>% select(-labels)
rm(df, df_long, df2, count, rank)
genotypes_var <- genotypes[, colSums(genotypes != 0) > 0]
cor(genotypes_var)
#### Cor cutoff ####
library('caret')
df1 <- genotypes_var
df2 = cor(df1)
hc = findCorrelation(df2, cutoff=0.8) # put any value as a "cutoff"
hc = sort(hc)
reduced_Data = df1[,-c(hc)]
print (reduced_Data)
dw.cor.Rsq.reduced <- ( cor(reduced_Data) )^2
corrplot(dw.cor.Rsq.reduced, method="color",  cl.lim = c(0, 1), type = "upper")
####  eigen values  ####
#   Reduced LD variants
e1 <- eigen(df2)
e2 <- eigen(dw.cor.Rsq.reduced)
sqrt(e2$values)
#### Proportion of variance ####
e2_prop <-
e2$values/sum(e2$values)
e2_prop <- as.data.frame(e2_prop)
e2_prop$PC <- row.names(e2_prop)
e2_prop %>%
ggplot(aes(y=as.numeric( e2_prop) ,
x=as.numeric(PC) )) +
geom_bar(stat="identity")
####  eigen values  ####
#   Full gene variants
sqrt(e1$values)
#Proportion of variance:
e1_prop <-
e1$values/sum(e1$values)
e1_prop <- as.data.frame(e1_prop)
e1_prop$PC <- row.names(e1_prop)
e1_prop %>%
ggplot(aes(y=as.numeric( e1_prop) ,
x=as.numeric(PC) )) +
geom_bar(stat="identity")
# The same is done in a single command:
princomp(df2,cor=TRUE)
princomp(covmat=cor(df2))
# Use library factoextra
library(factoextra)
pca_res <- prcomp(df2, scale = TRUE)
fviz_eig(pca_res)
get_eig(pca_res)
# Quick look
pca_res$x[1:5,1:3]
# Variance explained
var_explained <- pca_res$sdev^2/sum(pca_res$sdev^2)
var_explained[1:5]
pca_res_x <- pca_res$x %>% as.data.frame()
pca_res_x$Var <- as.numeric( row.names(pca_res_x))
pca_res_x %>%
ggplot(aes(x=PC1,y=PC2,
label=Var)) +
scale_fill_gradient(low = "steelblue1 ", high = "navy")+
geom_label(aes(fill = Var), colour = "white", size = 2, alpha=0.7,
position=position_jitter(width=1,height=1))+
theme(legend.position="bottom",
panel.background = element_rect("#F7F7F7"))+
labs(x=paste0("PC1: ",round(var_explained[1]*100,1),"%"),
y=paste0("PC2: ",round(var_explained[2]*100,1),"%"))
pca_res_x$Var_explained <-
var_explained
pca_res_x$Group <- "Group 1"
pca_res_x <- pca_res_x %>% as.data.frame() %>% select(PC1:PC5, Var, Var_explained, Group )
pca_res_long <- gather(pca_res_x, PC, measurement, PC1:PC5, factor_key=TRUE)
pca_res_long %>%
ggplot(aes(x=Var, y=PC))+
geom_tile(aes(fill=(measurement)))+
scale_fill_gradient(low = "orange",
high = "brown")+
theme(legend.position="bottom",
panel.background = element_rect("#F7F7F7"))
findCorrelation(df, cutoff=0.8)
pca_res_x %>%
ggplot(aes(x=PC1,y=PC2,
label=Var)) +
scale_fill_gradient(low = "steelblue1 ", high = "navy")+
geom_label(aes(fill = Var), colour = "white", size = 2, alpha=0.7,
position=position_jitter(width=1,height=1))+
theme(legend.position="bottom",
panel.background = element_rect("#F7F7F7"))+
labs(x=paste0("PC1: ",round(var_explained[1]*100,1),"%"),
y=paste0("PC2: ",round(var_explained[2]*100,1),"%"))
pca_res_x
df1
df2
# set the matrix orientation : PCA for variant or for sample
genotypes_var_rotate <- rotate_df(genotypes_var, rn = NULL, cn = FALSE)
# set the matrix orientation : PCA for variant or for sample
install.packages(" sjmisc")
require(sjmisc)
genotypes_var_rotate <- t(genotypes_var)
genotypes_var_rotate <- t(genotypes_var)
#### Cor cutoff ####
library('caret')
df1 <- genotypes_var
df2 = cor(df1)
hc = findCorrelation(df2, cutoff=0.8) # put any value as a "cutoff"
hc = sort(hc)
reduced_Data = df1[,-c(hc)]
print (reduced_Data)
dw.cor.Rsq.reduced <- ( cor(reduced_Data) )^2
corrplot(dw.cor.Rsq.reduced, method="color",  cl.lim = c(0, 1), type = "upper")
####  eigen values  ####
#   Reduced LD variants
e1 <- eigen(df2)
e2 <- eigen(dw.cor.Rsq.reduced)
sqrt(e2$values)
#### Proportion of variance ####
e2_prop <-
e2$values/sum(e2$values)
e2_prop <- as.data.frame(e2_prop)
e2_prop$PC <- row.names(e2_prop)
e2_prop %>%
ggplot(aes(y=as.numeric( e2_prop) ,
x=as.numeric(PC) )) +
geom_bar(stat="identity")
####  eigen values  ####
#   Full gene variants
sqrt(e1$values)
#Proportion of variance:
e1_prop <-
e1$values/sum(e1$values)
e1_prop <- as.data.frame(e1_prop)
e1_prop$PC <- row.names(e1_prop)
e1_prop %>%
ggplot(aes(y=as.numeric( e1_prop) ,
x=as.numeric(PC) )) +
geom_bar(stat="identity")
# The same is done in a single command:
princomp(df2,cor=TRUE)
princomp(covmat=cor(df2))
# Use library factoextra
library(factoextra)
pca_res <- prcomp(df2, scale = TRUE)
fviz_eig(pca_res)
get_eig(pca_res)
# Quick look
pca_res$x[1:5,1:3]
# Variance explained
var_explained <- pca_res$sdev^2/sum(pca_res$sdev^2)
var_explained[1:5]
pca_res_x <- pca_res$x %>% as.data.frame()
pca_res_x$Var <- as.numeric( row.names(pca_res_x))
pca_res_x %>%
ggplot(aes(x=PC1,y=PC2,
label=Var)) +
scale_fill_gradient(low = "steelblue1 ", high = "navy")+
geom_label(aes(fill = Var), colour = "white", size = 2, alpha=0.7,
position=position_jitter(width=1,height=1))+
theme(legend.position="bottom",
panel.background = element_rect("#F7F7F7"))+
labs(x=paste0("PC1: ",round(var_explained[1]*100,1),"%"),
y=paste0("PC2: ",round(var_explained[2]*100,1),"%"))
genotypes_var <- t(genotypes_var)
#### Cor cutoff ####
library('caret')
df1 <- genotypes_var
df2 = cor(df1)
hc = findCorrelation(df2, cutoff=0.8) # put any value as a "cutoff"
hc = sort(hc)
reduced_Data = df1[,-c(hc)]
print (reduced_Data)
dw.cor.Rsq.reduced <- ( cor(reduced_Data) )^2
corrplot(dw.cor.Rsq.reduced, method="color",  cl.lim = c(0, 1), type = "upper")
####  eigen values  ####
#   Reduced LD variants
e1 <- eigen(df2)
e2 <- eigen(dw.cor.Rsq.reduced)
sqrt(e2$values)
#### Proportion of variance ####
e2_prop <-
e2$values/sum(e2$values)
e2_prop <- as.data.frame(e2_prop)
e2_prop$PC <- row.names(e2_prop)
e2_prop %>%
ggplot(aes(y=as.numeric( e2_prop) ,
x=as.numeric(PC) )) +
geom_bar(stat="identity")
####  eigen values  ####
#   Full gene variants
sqrt(e1$values)
#Proportion of variance:
e1_prop <-
e1$values/sum(e1$values)
e1_prop <- as.data.frame(e1_prop)
e1_prop$PC <- row.names(e1_prop)
e1_prop %>%
ggplot(aes(y=as.numeric( e1_prop) ,
x=as.numeric(PC) )) +
geom_bar(stat="identity")
# The same is done in a single command:
princomp(df2,cor=TRUE)
princomp(covmat=cor(df2))
# Use library factoextra
library(factoextra)
pca_res <- prcomp(df2, scale = TRUE)
fviz_eig(pca_res)
get_eig(pca_res)
# Quick look
pca_res$x[1:5,1:3]
# Variance explained
var_explained <- pca_res$sdev^2/sum(pca_res$sdev^2)
var_explained[1:5]
pca_res_x <- pca_res$x %>% as.data.frame()
pca_res_x$Var <- as.numeric( row.names(pca_res_x))
pca_res_x %>%
ggplot(aes(x=PC1,y=PC2,
label=Var)) +
scale_fill_gradient(low = "steelblue1 ", high = "navy")+
geom_label(aes(fill = Var), colour = "white", size = 2, alpha=0.7,
position=position_jitter(width=1,height=1))+
theme(legend.position="bottom",
panel.background = element_rect("#F7F7F7"))+
labs(x=paste0("PC1: ",round(var_explained[1]*100,1),"%"),
y=paste0("PC2: ",round(var_explained[2]*100,1),"%"))
df <-
read.table(file="../data/rsv.msa.tabbed.split",
header = FALSE,
sep = " ",
stringsAsFactors = FALSE,
colClasses = c("character"))
df$labels <- rownames(df)
# Wide to long
df_long <- df %>% tidyr::gather(var_pos, var, V1:V257, factor_key=TRUE)
df_long$var_pos <- as.numeric( str_replace_all(df_long$var_pos, "V", "") )
# Total count position / variant per position
count <-
df_long %>%
group_by(var_pos, var) %>%
tally(name = "var_count")
# For each position count and rank frequency of residue
rank <- count %>%
group_by(var_pos) %>%
mutate(rank = rank(desc(var_count))) %>%
arrange(rank)
# Name the most frequent residue as REF.
rank$binary <- rank$rank
rank$binary[rank$rank == "1"] <- "REF"
rank$binary[rank$rank > "1"] <- "ALT"
rank$value <- rank$rank
rank$value[rank$rank == "1"] <- "0"
rank$value[rank$rank > "1"] <- "1"
rank$value <- as.numeric(rank$value)
df2 <- merge(df_long, (rank %>% select(var_pos, var, value))) %>%
select(var_pos, labels, value)
genotypes <- spread(df2, var_pos, value)
rownames(genotypes) <- genotypes$labels
genotypes <- genotypes %>% select(-labels)
rm(df, df_long, df2, count, rank)
# set the matrix orientation : PCA for variant or for sample
genotypes_var <- t(genotypes_var)
cor(genotypes_var)
genotypes <- genotypes %>% select(-labels)
df <-
read.table(file="../data/rsv.msa.tabbed.split",
header = FALSE,
sep = " ",
stringsAsFactors = FALSE,
colClasses = c("character"))
df$labels <- rownames(df)
# Wide to long
df_long <- df %>% tidyr::gather(var_pos, var, V1:V257, factor_key=TRUE)
df_long$var_pos <- as.numeric( str_replace_all(df_long$var_pos, "V", "") )
# Total count position / variant per position
count <-
df_long %>%
group_by(var_pos, var) %>%
tally(name = "var_count")
# For each position count and rank frequency of residue
rank <- count %>%
group_by(var_pos) %>%
mutate(rank = rank(desc(var_count))) %>%
arrange(rank)
# Name the most frequent residue as REF.
rank$binary <- rank$rank
rank$binary[rank$rank == "1"] <- "REF"
rank$binary[rank$rank > "1"] <- "ALT"
rank$value <- rank$rank
rank$value[rank$rank == "1"] <- "0"
rank$value[rank$rank > "1"] <- "1"
rank$value <- as.numeric(rank$value)
df2 <- merge(df_long, (rank %>% select(var_pos, var, value))) %>%
select(var_pos, labels, value)
genotypes <- spread(df2, var_pos, value)
rownames(genotypes) <- genotypes$labels
genotypes <- genotypes %>% select(-labels)
rm(df, df_long, df2, count, rank)
View(genotypes)
# set the matrix orientation : PCA for variant or for sample
genotypes <- t(genotypes)
cor(genotypes)
#### Cor cutoff ####
library('caret')
df1 <- genotypes
df2 = cor(df1)
hc = findCorrelation(df2, cutoff=0.8) # put any value as a "cutoff"
hc = sort(hc)
reduced_Data = df1[,-c(hc)]
print (reduced_Data)
df1 <- genotypes
df2 = cor(df1)
View(genotypes)
# remove columns with no variation
genotypes_var <- genotypes[, colSums(genotypes != 0) > 0]
cor(genotypes_var)
View(genotypes_var)
#### Cor cutoff ####
library('caret')
df1 <- genotypes_var
df2 = cor(df1)
hc = findCorrelation(df2, cutoff=0.8) # put any value as a "cutoff"
hc = sort(hc)
reduced_Data = df1[,-c(hc)]
print (reduced_Data)
dw.cor.Rsq.reduced <- ( cor(reduced_Data) )^2
corrplot(dw.cor.Rsq.reduced, method="color",  cl.lim = c(0, 1), type = "upper")
####  eigen values  ####
#   Reduced LD variants
e1 <- eigen(df2)
e2 <- eigen(dw.cor.Rsq.reduced)
sqrt(e2$values)
#### Proportion of variance ####
e2_prop <-
e2$values/sum(e2$values)
e2_prop <- as.data.frame(e2_prop)
e2_prop$PC <- row.names(e2_prop)
e2_prop %>%
ggplot(aes(y=as.numeric( e2_prop) ,
x=as.numeric(PC) )) +
geom_bar(stat="identity")
####  eigen values  ####
#   Full gene variants
sqrt(e1$values)
#Proportion of variance:
e1_prop <-
e1$values/sum(e1$values)
e1_prop <- as.data.frame(e1_prop)
e1_prop$PC <- row.names(e1_prop)
e1_prop %>%
ggplot(aes(y=as.numeric( e1_prop) ,
x=as.numeric(PC) )) +
geom_bar(stat="identity")
# The same is done in a single command:
princomp(df2,cor=TRUE)
princomp(covmat=cor(df2))
# Use library factoextra
library(factoextra)
pca_res <- prcomp(df2, scale = TRUE)
fviz_eig(pca_res)
get_eig(pca_res)
# Quick look
pca_res$x[1:5,1:3]
# Variance explained
var_explained <- pca_res$sdev^2/sum(pca_res$sdev^2)
var_explained[1:5]
pca_res_x <- pca_res$x %>% as.data.frame()
pca_res_x$Var <- as.numeric( row.names(pca_res_x))
pca_res_x %>%
ggplot(aes(x=PC1,y=PC2,
label=Var)) +
scale_fill_gradient(low = "steelblue1 ", high = "navy")+
geom_label(aes(fill = Var), colour = "white", size = 2, alpha=0.7,
position=position_jitter(width=1,height=1))+
theme(legend.position="bottom",
panel.background = element_rect("#F7F7F7"))+
labs(x=paste0("PC1: ",round(var_explained[1]*100,1),"%"),
y=paste0("PC2: ",round(var_explained[2]*100,1),"%"))
pca_res
pca_res
# Wide to long
df_long <- df %>% tidyr::gather(var_pos, var, V1:V257, factor_key=TRUE)
df_long$var_pos <- as.numeric( str_replace_all(df_long$var_pos, "V", "") )
# Total count position / variant per position
count <-
df_long %>%
group_by(var_pos, var) %>%
tally(name = "var_count")
# For each position count and rank frequency of residue
rank <- count %>%
group_by(var_pos) %>%
mutate(rank = rank(desc(var_count))) %>%
arrange(rank)
# Name the most frequent residue as REF.
rank$binary <- rank$rank
rank$binary[rank$rank == "1"] <- "REF"
rank$binary[rank$rank > "1"] <- "ALT"
rank$value <- rank$rank
rank$value[rank$rank == "1"] <- "0"
rank$value[rank$rank > "1"] <- "1"
cor(genotypes_var)
#### Cor cutoff ####
library('caret')
df1 <- genotypes_var
df2 = cor(df1)
# Use library factoextra
library(factoextra)
pca_res <- prcomp(df2, scale = TRUE)
fviz_eig(pca_res)
get_eig(pca_res)
# Quick look
pca_res$x[1:5,1:3]
# Variance explained
var_explained <- pca_res$sdev^2/sum(pca_res$sdev^2)
var_explained[1:5]
pca_res_x <- pca_res$x %>% as.data.frame()
pca_res_x$Var <- as.numeric( row.names(pca_res_x))
pca_res_x %>%
ggplot(aes(x=PC1,y=PC2,
label=Var)) +
scale_fill_gradient(low = "steelblue1 ", high = "navy")+
geom_label(aes(fill = Var), colour = "white", size = 2, alpha=0.7,
position=position_jitter(width=1,height=1))+
theme(legend.position="bottom",
panel.background = element_rect("#F7F7F7"))+
labs(x=paste0("PC1: ",round(var_explained[1]*100,1),"%"),
y=paste0("PC2: ",round(var_explained[2]*100,1),"%"))
var_explained[1:5]
pca_res_x %>%
ggplot(aes(x=PC1,y=PC2,
label=Var)) +
scale_fill_gradient(low = "steelblue1 ", high = "navy")+
geom_label(aes(fill = Var), colour = "white", size = 2, alpha=0.7,
position=position_jitter(width=1,height=1))+
theme(legend.position="bottom",
panel.background = element_rect("#F7F7F7"))+
labs(x=paste0("PC1: ",round(var_explained[1]*100,1),"%"),
y=paste0("PC2: ",round(var_explained[2]*100,1),"%"))
pca_res_x$Var_explained <-
var_explained
pca_res_x$Group <- "Group 1"
pca_res_x <- pca_res_x %>% as.data.frame() %>% select(PC1:PC5, Var, Var_explained, Group )
pca_res_long <- gather(pca_res_x, PC, measurement, PC1:PC5, factor_key=TRUE)
pca_res_long %>%
ggplot(aes(x=Var, y=PC))+
geom_tile(aes(fill=(measurement)))+
scale_fill_gradient(low = "orange",
high = "brown")+
theme(legend.position="bottom",
panel.background = element_rect("#F7F7F7"))

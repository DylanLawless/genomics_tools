# Add this new annotation back onto the dataset
df_long <- merge(df_long, (rank %>% select(var_pos, var, value))) %>%
select(var_pos, labels, value)
df <-
read.table(file="../data/rsv.msa.tabbed.split",
header = FALSE,
sep = " ",
stringsAsFactors = FALSE,
colClasses = c("character"))
df$labels <- rownames(df)
# Wide to long
df_long <- df %>% tidyr::gather(var_pos, var, V1:V257, factor_key=TRUE)
df_long$var_pos <- as.numeric( str_replace_all(df_long$var_pos, "V", "") )
# Total count position / variant per position
count <-
df_long %>%
group_by(var_pos, var) %>%
tally(name = "var_count")
# For each position count and rank frequency of residue
rank <- count %>%
group_by(var_pos) %>%
mutate(rank = rank(desc(var_count))) %>%
arrange(rank)
# Name the most frequent residue as REF.
# Name the less frequent residue as ALT
rank$binary <- rank$rank
rank$binary[rank$rank == "1"] <- "REF"
rank$binary[rank$rank > "1"] <- "ALT"
rank$value <- rank$rank
rank$value[rank$rank == "1"] <- "0"
rank$value[rank$rank > "1"] <- "1"
rank$value <- as.numeric(rank$value)
rank
df_long
# Add this new annotation back onto the dataset
df_long <- merge(df_long, (rank %>% select(var_pos, var, value))) %>%
select(var_pos, labels, value)
df_long
# set lables as number so that they are in order instead of alphabetic
df_long$labels <- as.numeric(df_long$labels)
# convert long to wide format
genotypes <- spread(df_long, var_pos, value)
rownames(genotypes) <- genotypes$labels
genotypes <- genotypes %>% select(-labels)
rm(df, count, rank)
df_long %>%
ggplot(aes(x=labels, y=var_pos))+
geom_tile(aes( fill=as.factor(value) ))
# Plot the variants
df_long %>%
ggplot(aes(y=labels, x=var_pos))+
geom_tile(aes( fill=as.factor(value) ))
# Plot the variants
df_long %>%
ggplot(aes(y=labels, x=var_pos))+
geom_tile(aes( fill=as.factor(value) ), color=black)
# Plot the variants
df_long %>%
ggplot(aes(y=labels, x=var_pos))+
geom_tile(aes( fill=as.factor(value) ), color="black")
library(dplyr)
library(tidyr)
require(stringr)
df <-
read.table(file="../data/rsv.msa.tabbed.split",
header = FALSE,
sep = " ",
stringsAsFactors = FALSE,
colClasses = c("character"))
View(df)
df$labels <- rownames(df)
# Wide to long
df_long <- df %>% tidyr::gather(var_pos, var, V1:V257, factor_key=TRUE)
View(df_long)
df_long$var_pos <- as.numeric( str_replace_all(df_long$var_pos, "V", "") )
# Total count position / variant per position
count <-
df_long %>%
group_by(var_pos, var) %>%
tally(name = "var_count")
View(count)
# For each position count and rank frequency of residue
rank <- count %>%
group_by(var_pos) %>%
mutate(rank = rank(desc(var_count))) %>%
arrange(rank)
# Name the most frequent residue as REF.
# Name the less frequent residue as ALT
rank$binary <- rank$rank
rank$binary[rank$rank == "1"] <- "REF"
rank$binary[rank$rank > "1"] <- "ALT"
View(rank)
rank$value <- rank$rank
rank$value[rank$rank == "1"] <- "0"
rank$value[rank$rank > "1"] <- "1"
rank$value <- as.numeric(rank$value)
# Add this new annotation back onto the dataset
df_long <- merge(df_long, (rank %>% select(var_pos, var, value))) %>%
select(var_pos, labels, value)
# set lables as number so that they are in order instead of alphabetic
df_long$labels <- as.numeric(df_long$labels)
View(df_long)
# convert long to wide format
genotypes <- spread(df_long, var_pos, value)
View(genotypes)
rownames(genotypes) <- genotypes$labels
genotypes <- genotypes %>% select(-labels)
rm(df, count, rank)
# Plot the variants
df_long %>%
ggplot(aes(y=labels, x=var_pos))+
geom_tile(aes( fill=as.factor(value) ), color="black")
require(ggplot2)
# Plot the variants
df_long %>%
ggplot(aes(y=labels, x=var_pos))+
geom_tile(aes( fill=as.factor(value) ), color="black")
# set the matrix orientation : PCA for variant or for sample
genotypes <- t(genotypes)
# remove columns with no variation
genotypes_var <- genotypes[, colSums(genotypes != 0) > 0]
cor(genotypes_var)
#### Cor cutoff ####
library('caret')
df1 <- genotypes_var
df2 = cor(df1)
# Use library factoextra
library(factoextra)
pca_res <- prcomp(df2, scale = TRUE)
fviz_eig(pca_res)
get_eig(pca_res)
# Quick look
pca_res$x[1:5,1:3]
# Variance explained
var_explained <- pca_res$sdev^2/sum(pca_res$sdev^2)
var_explained[1:5]
pca_res_x <- pca_res$x %>% as.data.frame()
pca_res_x$Var <- as.numeric( row.names(pca_res_x))
pca_res_x %>%
ggplot(aes(x=PC1,y=PC2,
label=Var)) +
scale_fill_gradient(low = "steelblue1 ", high = "navy")+
geom_label(aes(fill = Var), colour = "white", size = 2, alpha=0.7,
position=position_jitter(width=1,height=1))+
theme(legend.position="bottom",
panel.background = element_rect("#F7F7F7"))+
labs(x=paste0("PC1: ",round(var_explained[1]*100,1),"%"),
y=paste0("PC2: ",round(var_explained[2]*100,1),"%"))
# Plot the variants
df_long %>%
ggplot(aes(y=labels, x=var_pos))+
geom_tile(aes( fill=as.factor(value) ), color="black")
pca_res_x %>%
ggplot(aes(x=PC1,y=PC2,
label=Var)) +
scale_fill_gradient(low = "steelblue1 ", high = "navy")+
geom_label(aes(fill = Var), colour = "white", size = 2, alpha=0.7,
position=position_jitter(width=1,height=1))+
theme(legend.position="bottom",
panel.background = element_rect("#F7F7F7"))+
labs(x=paste0("PC1: ",round(var_explained[1]*100,1),"%"),
y=paste0("PC2: ",round(var_explained[2]*100,1),"%"))
pca_res_x %>%
ggplot(aes(x=PC3,y=PC2,
label=Var)) +
scale_fill_gradient(low = "steelblue1 ", high = "navy")+
geom_label(aes(fill = Var), colour = "white", size = 2, alpha=0.7,
position=position_jitter(width=1,height=1))+
theme(legend.position="bottom",
panel.background = element_rect("#F7F7F7"))+
labs(x=paste0("PC1: ",round(var_explained[1]*100,1),"%"),
y=paste0("PC2: ",round(var_explained[2]*100,1),"%"))
# Plot the variants
df_long %>%
ggplot(aes(y=labels, x=var_pos))+
geom_tile(aes( fill=as.factor(value) ), color="black")
pca_res_x %>%
ggplot(aes(x=PC1,y=PC2,
label=Var)) +
scale_fill_gradient(low = "steelblue1 ", high = "navy")+
geom_label(aes(fill = Var), colour = "white", size = 2, alpha=0.7,
position=position_jitter(width=1,height=1))+
theme(legend.position="bottom",
panel.background = element_rect("#F7F7F7"))+
labs(x=paste0("PC1: ",round(var_explained[1]*100,1),"%"),
y=paste0("PC2: ",round(var_explained[2]*100,1),"%"))
View(df_long)
df_long %>%
filter(var_pos == 1)
df_pos1 <-
df_long %>%
filter(var_pos == 1)
View(df_pos1)
df_pos1[,1:2]
df_pos1[1:2]
df_pos1[1:2, 1:2]
df_pos1[, 1:2]
df_pos1[1:3, 1:2]
df_pos1_case <- df_pos1[1:15, 1:2]
df_pos1_case <- df_pos1[1:15, 1:2]
df_pos1_contol <- df_pos1[16:30, 1:2]
df_pos1_case$status <- "case"
df_pos1_control$status <- "control"
df_pos1_case <- df_pos1[1:15, 1:2]
df_pos1_contol <- df_pos1[16:30, 1:2]
df_pos1_case$status <- "case"
df_pos1_control$status <- "control"
df_pos1_contol
df_pos1_case$status <- "case"
df_pos1_contol$status <- "control"
merge(df_pos1_case, df_pos1_control)
df_pos1_case <- df_pos1[1:15, 1:2]
df_pos1_control <- df_pos1[16:30, 1:2]
df_pos1_case$status <- "case"
df_pos1_control$status <- "control"
merge(df_pos1_case, df_pos1_control)
join(df_pos1_case, df_pos1_control)
bind(df_pos1_case, df_pos1_control)
cbind(df_pos1_case, df_pos1_control)
df_pos_status <- rbind(df_pos1_case, df_pos1_control)
View(df_pos_status)
View(df_long)
df_pos1[1:15, 1:2]
df_pos1_case <- df_pos1[1:15, 1:3]
df_pos1_control <- df_pos1[16:30, 1:3]
df_pos1_case$status <- "case"
df_pos1_control$status <- "control"
df_pos_status <- rbind(df_pos1_case, df_pos1_control)
df_pos1 <-
df_long %>%
filter(var_pos == 10)
df_pos1_case <- df_pos1[1:15, 1:3]
df_pos1_control <- df_pos1[16:30, 1:3]
df_pos1_case$status <- "case"
df_pos1_control$status <- "control"
df_pos_status <- rbind(df_pos1_case, df_pos1_control)
glm( status ~ value, family = binomial, data = df_pos_status)
glm( value ~status, family = binomial, data = df_pos_status)
logistic.model <- glm(value ~status, family = "binomial", data = df_pos_status)
summary(logistic.model)
df_pos_status
logistic.model <- glm(status ~ value, family = "binomial", data = df_pos_status)
df_pos_status$status <- as.factor(df_pos_status$status)
logistic.model <- glm(status ~ value, family = "binomial", data = df_pos_status)
summary(logistic.model)
# Odds ratio and CI
exp(cbind(coef(logistic.model), confint(logistic.model)))
summary(logistic.model)
View(df_long)
df_pos1_case
df_pos_status
merge(x=df_pos_status, y=df_long, by=labels )
View(df_long)
df_pos_status %>% select(status, labels)
status <- df_pos_status %>% select(status, labels)
merge(status, y=df_long, by=labels )
merge(status, y=df_long, by="labels" )
status <- df_pos_status %>% select(status, labels)
df_long_status <- merge(status, y=df_long, by="labels" )
df_long_status
df_long_status$status <- as.factor(df_long_status$status)
logistic.model <- glm(status ~ value, family = "binomial", data = df_long_status)
summary(logistic.model)
# Odds ratio and CI
exp(cbind(coef(logistic.model), confint(logistic.model)))
summary(logistic.model)
30*257
logistic.model <- glm(status ~ value + var_pos, family = "binomial", data = df_long_status)
summary(logistic.model)
# Import muitlple sequence alignment of amino acids
df <-
read.table(file="../data/amino.msa.tabbed.split",
header = FALSE,
sep = " ",
stringsAsFactors = FALSE,
colClasses = c("character"))
library(dplyr)
library(tidyr)
require(stringr)
df <-
read.table(file="../data/rsv.msa.tabbed.split",
header = FALSE,
sep = " ",
stringsAsFactors = FALSE,
colClasses = c("character"))
df$labels <- rownames(df)
# Wide to long
df_long <- df %>% tidyr::gather(var_pos, var, V1:V257, factor_key=TRUE)
df_long$var_pos <- as.numeric( str_replace_all(df_long$var_pos, "V", "") )
# Total count position / variant per position
count <-
df_long %>%
group_by(var_pos, var) %>%
tally(name = "var_count")
# For each position count and rank frequency of residue
rank <- count %>%
group_by(var_pos) %>%
mutate(rank = rank(desc(var_count))) %>%
arrange(rank)
# Name the most frequent residue as REF.
# Name the less frequent residue as ALT
rank$binary <- rank$rank
rank$binary[rank$rank == "1"] <- "REF"
rank$binary[rank$rank > "1"] <- "ALT"
rank$value <- rank$rank
rank$value[rank$rank == "1"] <- "0"
rank$value[rank$rank > "1"] <- "1"
rank$value <- as.numeric(rank$value)
# Add this new annotation back onto the dataset
df_long <- merge(df_long, (rank %>% select(var_pos, var, value))) %>%
select(var_pos, labels, value)
# set lables as number so that they are in order instead of alphabetic
df_long$labels <- as.numeric(df_long$labels)
# convert long to wide format
genotypes <- spread(df_long, var_pos, value)
rownames(genotypes) <- genotypes$labels
genotypes <- genotypes %>% select(-labels)
rm(df, count, rank)
require(ggplot2)
# Plot the variants
df_long %>%
ggplot(aes(y=labels, x=var_pos))+
geom_tile(aes( fill=as.factor(value) ), color="black")
# set the matrix orientation : PCA for variant or for sample
genotypes <- t(genotypes)
# remove columns with no variation
genotypes_var <- genotypes[, colSums(genotypes != 0) > 0]
cor(genotypes_var)
#### Cor cutoff ####
library('caret')
df1 <- genotypes_var
df2 = cor(df1)
# Use library factoextra
library(factoextra)
pca_res <- prcomp(df2, scale = TRUE)
fviz_eig(pca_res)
get_eig(pca_res)
# Quick look
pca_res$x[1:5,1:3]
# Variance explained
var_explained <- pca_res$sdev^2/sum(pca_res$sdev^2)
var_explained[1:5]
pca_res_x <- pca_res$x %>% as.data.frame()
pca_res_x$Var <- as.numeric( row.names(pca_res_x))
pca_res_x %>%
ggplot(aes(x=PC1,y=PC2,
label=Var)) +
scale_fill_gradient(low = "steelblue1 ", high = "navy")+
geom_label(aes(fill = Var), colour = "white", size = 2, alpha=0.7,
position=position_jitter(width=1,height=1))+
theme(legend.position="bottom",
panel.background = element_rect("#F7F7F7"))+
labs(x=paste0("PC1: ",round(var_explained[1]*100,1),"%"),
y=paste0("PC2: ",round(var_explained[2]*100,1),"%"))
pca_res_x$Var_explained <-
var_explained
pca_res_x$Group <- "Group 1"
pca_res_x <- pca_res_x %>% as.data.frame() %>% select(PC1:PC5, Var, Var_explained, Group )
pca_res_long <- gather(pca_res_x, PC, measurement, PC1:PC5, factor_key=TRUE)
pca_res_long %>%
ggplot(aes(x=Var, y=PC))+
geom_tile(aes(fill=(measurement)))+
scale_fill_gradient(low = "orange",
high = "brown")+
theme(legend.position="bottom",
panel.background = element_rect("#F7F7F7"))
# test 1 SNP
df_pos1 <-
df_long %>%
filter(var_pos == 10)
df_pos1_case <- df_pos1[1:15, 1:3]
df_pos1_control <- df_pos1[16:30, 1:3]
df_pos1_case$status <- "case"
df_pos1_control$status <- "control"
df_pos_status <- rbind(df_pos1_case, df_pos1_control)
df_pos_status
df_pos_status$status <- as.factor(df_pos_status$status)
logistic.model <- glm(status ~ value, family = "binomial", data = df_pos_status)
summary(logistic.model)
# Odds ratio and CI
exp(cbind(coef(logistic.model), confint(logistic.model)))
status <- df_pos_status %>% select(status, labels)
df_long_status <- merge(status, y=df_long, by="labels" )
df_long_status$status <- as.factor(df_long_status$status)
logistic.model <- glm(status ~ value, family = "binomial", data = df_long_status)
summary(logistic.model)
# Odds ratio and CI
exp(cbind(coef(logistic.model), confint(logistic.model)))
logistic.model <- glm(status ~ value + var_pos, family = "binomial", data = df_long_status)
summary(logistic.model)
# compare result
model1 = 0.000502 ***
model2 = 0.000427 ***
# example where sig assoc may be due to a batch effect
# case  5
# control 10
# case A 0
# control A 0
# case B 5
# control B 10
remove var if < 0.05 (5%) population has it
# CMC is based on counts: affected or not.
# SKAT is based on allele frequency: SNP1 is freq 0.01, and SNP2 is 0.3 then each will have a different "weight" in the model.
logistic.model <- glm(status ~ value + var_pos*weight(freq), family = "binomial", data = df_long_status)
summary(logistic.model)
fisher.test(status ~ value)
hc = findCorrelation(df2, cutoff=0.8) # put any value as a "cutoff"
hc = sort(hc)
reduced_Data = df1[,-c(hc)]
print (reduced_Data)
dw.cor.Rsq.reduced <- ( cor(reduced_Data) )^2
corrplot(dw.cor.Rsq.reduced, method="color",  cl.lim = c(0, 1), type = "upper")
####  eigen values  ####
#   Reduced LD variants
e1 <- eigen(df2)
e2 <- eigen(dw.cor.Rsq.reduced)
sqrt(e2$values)
#### Proportion of variance ####
e2_prop <-
e2$values/sum(e2$values)
e2_prop <- as.data.frame(e2_prop)
e2_prop$PC <- row.names(e2_prop)
e2_prop %>%
ggplot(aes(y=as.numeric( e2_prop) ,
x=as.numeric(PC) )) +
geom_bar(stat="identity")
####  eigen values  ####
#   Full gene variants
sqrt(e1$values)
#Proportion of variance:
e1_prop <-
e1$values/sum(e1$values)
e1_prop <- as.data.frame(e1_prop)
e1_prop$PC <- row.names(e1_prop)
e1_prop %>%
ggplot(aes(y=as.numeric( e1_prop) ,
x=as.numeric(PC) )) +
geom_bar(stat="identity")
# The same is done in a single command:
princomp(df2,cor=TRUE)
princomp(covmat=cor(df2))
findCorrelation(df, cutoff=0.8)
library(corrplot)
dw.cor<-cor(df)
dw.cor.Rsq <- (dw.cor)^2
corrplot(dw.cor.Rsq, method="color",  cl.lim = c(0, 1))
# convert each individual (row) and variant (col) to 0/1
d <- test_set_RefAlt %>%
select(var_pos, label, binary)
d$var_pos <- as.numeric( str_replace_all(d$var_pos, "V", "") )
d$binary[d$binary == "REF"] <- "0"
d$binary[d$binary == "ALT"] <- "1"
d$binary <- as.numeric(d$binary)
dw <- spread(d, var_pos, binary)
tmp_keep <- dw
row.names(dw) <- dw$label
dw <- within(dw, rm(label))
library(corrplot)
dw.cor<-cor(dw)
dw.cor.Rsq <- (dw.cor)^2
corrplot(dw.cor.Rsq, method="color",  cl.lim = c(0, 1))
#### Cor cutoff ####
library('caret')
df1 <- dw
df2 = cor(df1)
hc = findCorrelation(df2, cutoff=0.8) # put any value as a "cutoff"
hc = sort(hc)
reduced_Data = df1[,-c(hc)]
print (reduced_Data)
dw.cor.Rsq.reduced <- ( cor(reduced_Data) )^2
corrplot(dw.cor.Rsq.reduced, method="color",  cl.lim = c(0, 1), type = "upper")
####  eigen values  ####
#   Reduced LD variants
e1 <- eigen(df2)
e2 <- eigen(dw.cor.Rsq.reduced)
sqrt(e2$values)
#### Proportion of variance ####
e2_prop <-
e2$values/sum(e2$values)
e2_prop <- as.data.frame(e2_prop)
e2_prop$PC <- row.names(e2_prop)
e2_prop %>%
ggplot(aes(y=as.numeric( e2_prop) ,
x=as.numeric(PC) )) +
geom_bar(stat="identity")
####  eigen values  ####
#   Full gene variants
sqrt(e1$values)
#Proportion of variance:
e1_prop <-
e1$values/sum(e1$values)
e1_prop <- as.data.frame(e1_prop)
e1_prop$PC <- row.names(e1_prop)
e1_prop %>%
ggplot(aes(y=as.numeric( e1_prop) ,
x=as.numeric(PC) )) +
geom_bar(stat="identity")
# The same is done in a single command:
princomp(df2,cor=TRUE)
princomp(covmat=cor(df2))
# Use library factoextra
library(factoextra)
pca_res <- prcomp(df2, scale = TRUE)
fviz_eig(pca_res)
get_eig(pca_res)
# Quick look
pca_res$x[1:5,1:3]
# Variance explained
var_explained <- pca_res$sdev^2/sum(pca_res$sdev^2)
var_explained[1:5]
pca_res_x <- pca_res$x %>% as.data.frame()
pca_res_x$Var <- as.numeric( row.names(pca_res_x))
